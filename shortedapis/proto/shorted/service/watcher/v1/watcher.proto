// // Copyright (c) 2020 Shorted Ltd Pty.
// //
// // Permission is hereby granted, free of charge, to any person obtaining a copy
// // of this software and associated documentation files (the "Software"), to deal
// // in the Software without restriction, including without limitation the rights
// // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// // copies of the Software, and to permit persons to whom the Software is
// // furnished to do so, subject to the following conditions:
// //
// // The above copyright notice and this permission notice shall be included in
// // all copies or substantial portions of the Software.
// //
// // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// // THE SOFTWARE.

syntax = "proto3";

package shorted.service.watcher.v1;

option go_package = "github.com/shortedapp/shorted/sshortedapis/pkg/shorted/service/watcher/v1;watcher";

import "validate/validate.proto";
import "google/protobuf/timestamp.proto";
import "shorted/api/v1/core.proto";



// WatchDetails contains the set of information for a given watch. 
message WatcherDetails {
  string apiVersion = 1;
  Metadata metadata = 2 [(validate.rules).message.required = true];
  Spec spec = 3 [(validate.rules).message.required = true];
  SyncStatus status = 4;
}

message Metadata {
  string id = 1 [(validate.rules).string.uuid = true];
  string name = 2 [(validate.rules).string = {min_len: 5, max_len: 10}];
  string creationTimestamp = 3;
}

message Spec {
  shorted.api.Source source = 3 [(validate.rules).message.required = true];
  Index index = 4;
}




// Index defines where the discovered content of a Source is stored
message Index {
  //url where index is stored (i.e gs://<project-name>-index/index.json)
  string url = 1 [(validate.rules).string.uri = true];
  int64 count = 2;
  google.protobuf.Timestamp last_updated = 3 [(validate.rules).timestamp.required = true];
  Entries entries = 4;
}


message Entries {
  map<string, Documents> documents = 1;
}

message Documents {
  repeated DocumentDetails document = 1;
  google.protobuf.Timestamp last_updated = 2 [(validate.rules).timestamp.required = true];
}

message DocumentDetails {
  DocumentMetadata metadata =1;
  google.protobuf.Timestamp created_at = 2;
  bool removed = 3;
  string digest = 4;
  string url = 5 [(validate.rules).string.uri = true];

}

message DocumentMetadata {
  string name = 1;
  string date = 2;
  shorted.api.Format format = 3;
  string version = 4;
 
  
}

message SyncStatus {
  Status status = 3 [(validate.rules).enum.defined_only = true];
}

message SyncDetails {
  string id = 1 [(validate.rules).string.uuid = true];
  string name = 2 [(validate.rules).string = {min_len: 5, max_len: 10}];
  Status status = 3 [(validate.rules).enum.defined_only = true];
}
// SyncStatus specifies the state of a given synchronisation request.
// Where a synchronisation state will correspond to a specfic source
enum Status {
  UNSPECIFIED = 0;
  PENDING = 1;
  SUCCESS = 2;
  FAILURE = 3;
}

