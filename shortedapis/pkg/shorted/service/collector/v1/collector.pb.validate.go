// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: shorted/service/collector/v1/collector.proto

package collector

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	api "github.com/shortedapp/shorted/shortedapis/pkg/shorted/api/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}

	_ = api.Format(0)
)

// Validate checks the field values on CollectDetails with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CollectDetails) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApiVersion

	if m.GetMetadata() == nil {
		return CollectDetailsValidationError{
			field:  "Metadata",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectDetailsValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSpec() == nil {
		return CollectDetailsValidationError{
			field:  "Spec",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectDetailsValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectDetailsValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CollectDetailsValidationError is the validation error returned by
// CollectDetails.Validate if the designated constraints aren't met.
type CollectDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectDetailsValidationError) ErrorName() string { return "CollectDetailsValidationError" }

// Error satisfies the builtin error interface
func (e CollectDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectDetailsValidationError{}

// Validate checks the field values on Spec with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Spec) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetSource() == nil {
		return SpecValidationError{
			field:  "Source",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecValidationError{
				field:  "Source",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSink()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecValidationError{
				field:  "Sink",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SpecValidationError is the validation error returned by Spec.Validate if the
// designated constraints aren't met.
type SpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpecValidationError) ErrorName() string { return "SpecValidationError" }

// Error satisfies the builtin error interface
func (e SpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpecValidationError{}

// Validate checks the field values on SourceDetails with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SourceDetails) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SourceDetailsValidationError{
				field:  "Source",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SourceDetailsValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SourceDetailsValidationError is the validation error returned by
// SourceDetails.Validate if the designated constraints aren't met.
type SourceDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SourceDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SourceDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SourceDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SourceDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SourceDetailsValidationError) ErrorName() string { return "SourceDetailsValidationError" }

// Error satisfies the builtin error interface
func (e SourceDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSourceDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SourceDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SourceDetailsValidationError{}

// Validate checks the field values on SourceMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SourceMetadata) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Digest

	// no validation rules for Size

	// no validation rules for Headers

	return nil
}

// SourceMetadataValidationError is the validation error returned by
// SourceMetadata.Validate if the designated constraints aren't met.
type SourceMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SourceMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SourceMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SourceMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SourceMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SourceMetadataValidationError) ErrorName() string { return "SourceMetadataValidationError" }

// Error satisfies the builtin error interface
func (e SourceMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSourceMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SourceMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SourceMetadataValidationError{}

// Validate checks the field values on Sink with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Sink) Validate() error {
	if m == nil {
		return nil
	}

	if uri, err := url.Parse(m.GetUrl()); err != nil {
		return SinkValidationError{
			field:  "Url",
			reason: "value must be a valid URI",
			cause:  err,
		}
	} else if !uri.IsAbs() {
		return SinkValidationError{
			field:  "Url",
			reason: "value must be absolute",
		}
	}

	// no validation rules for Format

	return nil
}

// SinkValidationError is the validation error returned by Sink.Validate if the
// designated constraints aren't met.
type SinkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SinkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SinkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SinkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SinkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SinkValidationError) ErrorName() string { return "SinkValidationError" }

// Error satisfies the builtin error interface
func (e SinkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSink.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SinkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SinkValidationError{}

// Validate checks the field values on CollectStatus with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CollectStatus) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := Status_name[int32(m.GetStatus())]; !ok {
		return CollectStatusValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// CollectStatusValidationError is the validation error returned by
// CollectStatus.Validate if the designated constraints aren't met.
type CollectStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectStatusValidationError) ErrorName() string { return "CollectStatusValidationError" }

// Error satisfies the builtin error interface
func (e CollectStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectStatusValidationError{}
