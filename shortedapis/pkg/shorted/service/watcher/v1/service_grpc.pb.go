// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package watcher

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WatchServiceClient is the client API for WatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WatchServiceClient interface {
	// A unary RPC used to fetch a list of existing watches
	ListWatchers(ctx context.Context, in *ListWatchersRequest, opts ...grpc.CallOption) (*ListWatchersResponse, error)
	// A unary RPC used to fetch a specific watcherby watch ID
	GetWatcher(ctx context.Context, in *GetWatcherRequest, opts ...grpc.CallOption) (*GetWatcherResponse, error)
	// A unary RPC to create a new watch source.
	CreateWatcher(ctx context.Context, in *CreateWatcherRequest, opts ...grpc.CallOption) (*CreateWatcherResponse, error)
	// A unary RPC to delete a watch source.
	DeleteWatcher(ctx context.Context, in *DeleteWatcherRequest, opts ...grpc.CallOption) (*DeleteWatcherResponse, error)
	// A unary RPC to update an existing watch.
	UpdateWatcher(ctx context.Context, in *UpdateWatcherRequest, opts ...grpc.CallOption) (*UpdateWatcherResponse, error)
	// A unary RPC to update an existing watch.
	SyncAll(ctx context.Context, in *SyncAllRequest, opts ...grpc.CallOption) (*SyncAllResponse, error)
	// A unary RPC to update an existing watch.
	SyncWatcher(ctx context.Context, in *SyncWatcherRequest, opts ...grpc.CallOption) (*SyncWatcherResponse, error)
}

type watchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWatchServiceClient(cc grpc.ClientConnInterface) WatchServiceClient {
	return &watchServiceClient{cc}
}

func (c *watchServiceClient) ListWatchers(ctx context.Context, in *ListWatchersRequest, opts ...grpc.CallOption) (*ListWatchersResponse, error) {
	out := new(ListWatchersResponse)
	err := c.cc.Invoke(ctx, "/shorted.service.watcher.v1.WatchService/ListWatchers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchServiceClient) GetWatcher(ctx context.Context, in *GetWatcherRequest, opts ...grpc.CallOption) (*GetWatcherResponse, error) {
	out := new(GetWatcherResponse)
	err := c.cc.Invoke(ctx, "/shorted.service.watcher.v1.WatchService/GetWatcher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchServiceClient) CreateWatcher(ctx context.Context, in *CreateWatcherRequest, opts ...grpc.CallOption) (*CreateWatcherResponse, error) {
	out := new(CreateWatcherResponse)
	err := c.cc.Invoke(ctx, "/shorted.service.watcher.v1.WatchService/CreateWatcher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchServiceClient) DeleteWatcher(ctx context.Context, in *DeleteWatcherRequest, opts ...grpc.CallOption) (*DeleteWatcherResponse, error) {
	out := new(DeleteWatcherResponse)
	err := c.cc.Invoke(ctx, "/shorted.service.watcher.v1.WatchService/DeleteWatcher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchServiceClient) UpdateWatcher(ctx context.Context, in *UpdateWatcherRequest, opts ...grpc.CallOption) (*UpdateWatcherResponse, error) {
	out := new(UpdateWatcherResponse)
	err := c.cc.Invoke(ctx, "/shorted.service.watcher.v1.WatchService/UpdateWatcher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchServiceClient) SyncAll(ctx context.Context, in *SyncAllRequest, opts ...grpc.CallOption) (*SyncAllResponse, error) {
	out := new(SyncAllResponse)
	err := c.cc.Invoke(ctx, "/shorted.service.watcher.v1.WatchService/SyncAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchServiceClient) SyncWatcher(ctx context.Context, in *SyncWatcherRequest, opts ...grpc.CallOption) (*SyncWatcherResponse, error) {
	out := new(SyncWatcherResponse)
	err := c.cc.Invoke(ctx, "/shorted.service.watcher.v1.WatchService/SyncWatcher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WatchServiceServer is the server API for WatchService service.
// All implementations must embed UnimplementedWatchServiceServer
// for forward compatibility
type WatchServiceServer interface {
	// A unary RPC used to fetch a list of existing watches
	ListWatchers(context.Context, *ListWatchersRequest) (*ListWatchersResponse, error)
	// A unary RPC used to fetch a specific watcherby watch ID
	GetWatcher(context.Context, *GetWatcherRequest) (*GetWatcherResponse, error)
	// A unary RPC to create a new watch source.
	CreateWatcher(context.Context, *CreateWatcherRequest) (*CreateWatcherResponse, error)
	// A unary RPC to delete a watch source.
	DeleteWatcher(context.Context, *DeleteWatcherRequest) (*DeleteWatcherResponse, error)
	// A unary RPC to update an existing watch.
	UpdateWatcher(context.Context, *UpdateWatcherRequest) (*UpdateWatcherResponse, error)
	// A unary RPC to update an existing watch.
	SyncAll(context.Context, *SyncAllRequest) (*SyncAllResponse, error)
	// A unary RPC to update an existing watch.
	SyncWatcher(context.Context, *SyncWatcherRequest) (*SyncWatcherResponse, error)
	mustEmbedUnimplementedWatchServiceServer()
}

// UnimplementedWatchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWatchServiceServer struct {
}

func (UnimplementedWatchServiceServer) ListWatchers(context.Context, *ListWatchersRequest) (*ListWatchersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWatchers not implemented")
}
func (UnimplementedWatchServiceServer) GetWatcher(context.Context, *GetWatcherRequest) (*GetWatcherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWatcher not implemented")
}
func (UnimplementedWatchServiceServer) CreateWatcher(context.Context, *CreateWatcherRequest) (*CreateWatcherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWatcher not implemented")
}
func (UnimplementedWatchServiceServer) DeleteWatcher(context.Context, *DeleteWatcherRequest) (*DeleteWatcherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWatcher not implemented")
}
func (UnimplementedWatchServiceServer) UpdateWatcher(context.Context, *UpdateWatcherRequest) (*UpdateWatcherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWatcher not implemented")
}
func (UnimplementedWatchServiceServer) SyncAll(context.Context, *SyncAllRequest) (*SyncAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncAll not implemented")
}
func (UnimplementedWatchServiceServer) SyncWatcher(context.Context, *SyncWatcherRequest) (*SyncWatcherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncWatcher not implemented")
}
func (UnimplementedWatchServiceServer) mustEmbedUnimplementedWatchServiceServer() {}

// UnsafeWatchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WatchServiceServer will
// result in compilation errors.
type UnsafeWatchServiceServer interface {
	mustEmbedUnimplementedWatchServiceServer()
}

func RegisterWatchServiceServer(s grpc.ServiceRegistrar, srv WatchServiceServer) {
	s.RegisterService(&WatchService_ServiceDesc, srv)
}

func _WatchService_ListWatchers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWatchersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServiceServer).ListWatchers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorted.service.watcher.v1.WatchService/ListWatchers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServiceServer).ListWatchers(ctx, req.(*ListWatchersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchService_GetWatcher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWatcherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServiceServer).GetWatcher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorted.service.watcher.v1.WatchService/GetWatcher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServiceServer).GetWatcher(ctx, req.(*GetWatcherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchService_CreateWatcher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWatcherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServiceServer).CreateWatcher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorted.service.watcher.v1.WatchService/CreateWatcher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServiceServer).CreateWatcher(ctx, req.(*CreateWatcherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchService_DeleteWatcher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWatcherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServiceServer).DeleteWatcher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorted.service.watcher.v1.WatchService/DeleteWatcher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServiceServer).DeleteWatcher(ctx, req.(*DeleteWatcherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchService_UpdateWatcher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWatcherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServiceServer).UpdateWatcher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorted.service.watcher.v1.WatchService/UpdateWatcher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServiceServer).UpdateWatcher(ctx, req.(*UpdateWatcherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchService_SyncAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServiceServer).SyncAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorted.service.watcher.v1.WatchService/SyncAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServiceServer).SyncAll(ctx, req.(*SyncAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchService_SyncWatcher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncWatcherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServiceServer).SyncWatcher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorted.service.watcher.v1.WatchService/SyncWatcher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServiceServer).SyncWatcher(ctx, req.(*SyncWatcherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WatchService_ServiceDesc is the grpc.ServiceDesc for WatchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WatchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shorted.service.watcher.v1.WatchService",
	HandlerType: (*WatchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListWatchers",
			Handler:    _WatchService_ListWatchers_Handler,
		},
		{
			MethodName: "GetWatcher",
			Handler:    _WatchService_GetWatcher_Handler,
		},
		{
			MethodName: "CreateWatcher",
			Handler:    _WatchService_CreateWatcher_Handler,
		},
		{
			MethodName: "DeleteWatcher",
			Handler:    _WatchService_DeleteWatcher_Handler,
		},
		{
			MethodName: "UpdateWatcher",
			Handler:    _WatchService_UpdateWatcher_Handler,
		},
		{
			MethodName: "SyncAll",
			Handler:    _WatchService_SyncAll_Handler,
		},
		{
			MethodName: "SyncWatcher",
			Handler:    _WatchService_SyncWatcher_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shorted/service/watcher/v1/service.proto",
}
