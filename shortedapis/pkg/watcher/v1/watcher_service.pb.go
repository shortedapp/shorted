// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shorted/watcher/v1/watcher_service.proto

package watcher

import (
	context "context"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ------------ LIST ------------
// ListWatchersRequest
type ListWatchersRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListWatchersRequest) Reset()         { *m = ListWatchersRequest{} }
func (m *ListWatchersRequest) String() string { return proto.CompactTextString(m) }
func (*ListWatchersRequest) ProtoMessage()    {}
func (*ListWatchersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4810ced3ab1372f1, []int{0}
}
func (m *ListWatchersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWatchersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWatchersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWatchersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWatchersRequest.Merge(m, src)
}
func (m *ListWatchersRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListWatchersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWatchersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListWatchersRequest proto.InternalMessageInfo

type ListWatchersResponse struct {
	Watches              []*WatcherDetails `protobuf:"bytes,1,rep,name=watches,proto3" json:"watches,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ListWatchersResponse) Reset()         { *m = ListWatchersResponse{} }
func (m *ListWatchersResponse) String() string { return proto.CompactTextString(m) }
func (*ListWatchersResponse) ProtoMessage()    {}
func (*ListWatchersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4810ced3ab1372f1, []int{1}
}
func (m *ListWatchersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListWatchersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListWatchersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListWatchersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWatchersResponse.Merge(m, src)
}
func (m *ListWatchersResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListWatchersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWatchersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListWatchersResponse proto.InternalMessageInfo

func (m *ListWatchersResponse) GetWatches() []*WatcherDetails {
	if m != nil {
		return m.Watches
	}
	return nil
}

// ------------ GET ------------
type GetWatcherRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetWatcherRequest) Reset()         { *m = GetWatcherRequest{} }
func (m *GetWatcherRequest) String() string { return proto.CompactTextString(m) }
func (*GetWatcherRequest) ProtoMessage()    {}
func (*GetWatcherRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4810ced3ab1372f1, []int{2}
}
func (m *GetWatcherRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWatcherRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWatcherRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWatcherRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWatcherRequest.Merge(m, src)
}
func (m *GetWatcherRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetWatcherRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWatcherRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetWatcherRequest proto.InternalMessageInfo

func (m *GetWatcherRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetWatcherResponse struct {
	Watch                *WatcherDetails `protobuf:"bytes,1,opt,name=watch,proto3" json:"watch,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetWatcherResponse) Reset()         { *m = GetWatcherResponse{} }
func (m *GetWatcherResponse) String() string { return proto.CompactTextString(m) }
func (*GetWatcherResponse) ProtoMessage()    {}
func (*GetWatcherResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4810ced3ab1372f1, []int{3}
}
func (m *GetWatcherResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWatcherResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWatcherResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWatcherResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWatcherResponse.Merge(m, src)
}
func (m *GetWatcherResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetWatcherResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWatcherResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetWatcherResponse proto.InternalMessageInfo

func (m *GetWatcherResponse) GetWatch() *WatcherDetails {
	if m != nil {
		return m.Watch
	}
	return nil
}

type CreateWatcherRequest struct {
	Watch                *WatcherDetails `protobuf:"bytes,1,opt,name=watch,proto3" json:"watch,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CreateWatcherRequest) Reset()         { *m = CreateWatcherRequest{} }
func (m *CreateWatcherRequest) String() string { return proto.CompactTextString(m) }
func (*CreateWatcherRequest) ProtoMessage()    {}
func (*CreateWatcherRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4810ced3ab1372f1, []int{4}
}
func (m *CreateWatcherRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateWatcherRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateWatcherRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateWatcherRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateWatcherRequest.Merge(m, src)
}
func (m *CreateWatcherRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateWatcherRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateWatcherRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateWatcherRequest proto.InternalMessageInfo

func (m *CreateWatcherRequest) GetWatch() *WatcherDetails {
	if m != nil {
		return m.Watch
	}
	return nil
}

type CreateWatcherResponse struct {
	Watch                *WatcherDetails `protobuf:"bytes,1,opt,name=watch,proto3" json:"watch,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CreateWatcherResponse) Reset()         { *m = CreateWatcherResponse{} }
func (m *CreateWatcherResponse) String() string { return proto.CompactTextString(m) }
func (*CreateWatcherResponse) ProtoMessage()    {}
func (*CreateWatcherResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4810ced3ab1372f1, []int{5}
}
func (m *CreateWatcherResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateWatcherResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateWatcherResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateWatcherResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateWatcherResponse.Merge(m, src)
}
func (m *CreateWatcherResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateWatcherResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateWatcherResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateWatcherResponse proto.InternalMessageInfo

func (m *CreateWatcherResponse) GetWatch() *WatcherDetails {
	if m != nil {
		return m.Watch
	}
	return nil
}

type UpdateWatcherRequest struct {
	Id                   string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Watch                *WatcherDetails `protobuf:"bytes,2,opt,name=watch,proto3" json:"watch,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UpdateWatcherRequest) Reset()         { *m = UpdateWatcherRequest{} }
func (m *UpdateWatcherRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateWatcherRequest) ProtoMessage()    {}
func (*UpdateWatcherRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4810ced3ab1372f1, []int{6}
}
func (m *UpdateWatcherRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateWatcherRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateWatcherRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateWatcherRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateWatcherRequest.Merge(m, src)
}
func (m *UpdateWatcherRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateWatcherRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateWatcherRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateWatcherRequest proto.InternalMessageInfo

func (m *UpdateWatcherRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateWatcherRequest) GetWatch() *WatcherDetails {
	if m != nil {
		return m.Watch
	}
	return nil
}

type UpdateWatcherResponse struct {
	Watch                *WatcherDetails `protobuf:"bytes,1,opt,name=watch,proto3" json:"watch,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UpdateWatcherResponse) Reset()         { *m = UpdateWatcherResponse{} }
func (m *UpdateWatcherResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateWatcherResponse) ProtoMessage()    {}
func (*UpdateWatcherResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4810ced3ab1372f1, []int{7}
}
func (m *UpdateWatcherResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateWatcherResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateWatcherResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateWatcherResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateWatcherResponse.Merge(m, src)
}
func (m *UpdateWatcherResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateWatcherResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateWatcherResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateWatcherResponse proto.InternalMessageInfo

func (m *UpdateWatcherResponse) GetWatch() *WatcherDetails {
	if m != nil {
		return m.Watch
	}
	return nil
}

type DeleteWatcherRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteWatcherRequest) Reset()         { *m = DeleteWatcherRequest{} }
func (m *DeleteWatcherRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteWatcherRequest) ProtoMessage()    {}
func (*DeleteWatcherRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4810ced3ab1372f1, []int{8}
}
func (m *DeleteWatcherRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteWatcherRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteWatcherRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteWatcherRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteWatcherRequest.Merge(m, src)
}
func (m *DeleteWatcherRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteWatcherRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteWatcherRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteWatcherRequest proto.InternalMessageInfo

func (m *DeleteWatcherRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeleteWatcherResponse struct {
	Watch                *WatcherDetails `protobuf:"bytes,1,opt,name=watch,proto3" json:"watch,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *DeleteWatcherResponse) Reset()         { *m = DeleteWatcherResponse{} }
func (m *DeleteWatcherResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteWatcherResponse) ProtoMessage()    {}
func (*DeleteWatcherResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4810ced3ab1372f1, []int{9}
}
func (m *DeleteWatcherResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteWatcherResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteWatcherResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteWatcherResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteWatcherResponse.Merge(m, src)
}
func (m *DeleteWatcherResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteWatcherResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteWatcherResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteWatcherResponse proto.InternalMessageInfo

func (m *DeleteWatcherResponse) GetWatch() *WatcherDetails {
	if m != nil {
		return m.Watch
	}
	return nil
}

// ------------ Sync ------------
// TODO(castlemilk): good use case for using streaming to track sync status to watch for updates etc via shortedctl
type SyncAllRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncAllRequest) Reset()         { *m = SyncAllRequest{} }
func (m *SyncAllRequest) String() string { return proto.CompactTextString(m) }
func (*SyncAllRequest) ProtoMessage()    {}
func (*SyncAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4810ced3ab1372f1, []int{10}
}
func (m *SyncAllRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncAllRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncAllRequest.Merge(m, src)
}
func (m *SyncAllRequest) XXX_Size() int {
	return m.Size()
}
func (m *SyncAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SyncAllRequest proto.InternalMessageInfo

type SyncAllResponse struct {
	Sync                 []*SyncDetails `protobuf:"bytes,1,rep,name=sync,proto3" json:"sync,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SyncAllResponse) Reset()         { *m = SyncAllResponse{} }
func (m *SyncAllResponse) String() string { return proto.CompactTextString(m) }
func (*SyncAllResponse) ProtoMessage()    {}
func (*SyncAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4810ced3ab1372f1, []int{11}
}
func (m *SyncAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncAllResponse.Merge(m, src)
}
func (m *SyncAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *SyncAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SyncAllResponse proto.InternalMessageInfo

func (m *SyncAllResponse) GetSync() []*SyncDetails {
	if m != nil {
		return m.Sync
	}
	return nil
}

type SyncWatcherRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncWatcherRequest) Reset()         { *m = SyncWatcherRequest{} }
func (m *SyncWatcherRequest) String() string { return proto.CompactTextString(m) }
func (*SyncWatcherRequest) ProtoMessage()    {}
func (*SyncWatcherRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4810ced3ab1372f1, []int{12}
}
func (m *SyncWatcherRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncWatcherRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncWatcherRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncWatcherRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncWatcherRequest.Merge(m, src)
}
func (m *SyncWatcherRequest) XXX_Size() int {
	return m.Size()
}
func (m *SyncWatcherRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncWatcherRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SyncWatcherRequest proto.InternalMessageInfo

func (m *SyncWatcherRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type SyncWatcherResponse struct {
	Sync                 *SyncDetails `protobuf:"bytes,1,opt,name=sync,proto3" json:"sync,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SyncWatcherResponse) Reset()         { *m = SyncWatcherResponse{} }
func (m *SyncWatcherResponse) String() string { return proto.CompactTextString(m) }
func (*SyncWatcherResponse) ProtoMessage()    {}
func (*SyncWatcherResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4810ced3ab1372f1, []int{13}
}
func (m *SyncWatcherResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncWatcherResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncWatcherResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncWatcherResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncWatcherResponse.Merge(m, src)
}
func (m *SyncWatcherResponse) XXX_Size() int {
	return m.Size()
}
func (m *SyncWatcherResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncWatcherResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SyncWatcherResponse proto.InternalMessageInfo

func (m *SyncWatcherResponse) GetSync() *SyncDetails {
	if m != nil {
		return m.Sync
	}
	return nil
}

func init() {
	proto.RegisterType((*ListWatchersRequest)(nil), "shorted.watcher.v1.ListWatchersRequest")
	proto.RegisterType((*ListWatchersResponse)(nil), "shorted.watcher.v1.ListWatchersResponse")
	proto.RegisterType((*GetWatcherRequest)(nil), "shorted.watcher.v1.GetWatcherRequest")
	proto.RegisterType((*GetWatcherResponse)(nil), "shorted.watcher.v1.GetWatcherResponse")
	proto.RegisterType((*CreateWatcherRequest)(nil), "shorted.watcher.v1.CreateWatcherRequest")
	proto.RegisterType((*CreateWatcherResponse)(nil), "shorted.watcher.v1.CreateWatcherResponse")
	proto.RegisterType((*UpdateWatcherRequest)(nil), "shorted.watcher.v1.UpdateWatcherRequest")
	proto.RegisterType((*UpdateWatcherResponse)(nil), "shorted.watcher.v1.UpdateWatcherResponse")
	proto.RegisterType((*DeleteWatcherRequest)(nil), "shorted.watcher.v1.DeleteWatcherRequest")
	proto.RegisterType((*DeleteWatcherResponse)(nil), "shorted.watcher.v1.DeleteWatcherResponse")
	proto.RegisterType((*SyncAllRequest)(nil), "shorted.watcher.v1.SyncAllRequest")
	proto.RegisterType((*SyncAllResponse)(nil), "shorted.watcher.v1.SyncAllResponse")
	proto.RegisterType((*SyncWatcherRequest)(nil), "shorted.watcher.v1.SyncWatcherRequest")
	proto.RegisterType((*SyncWatcherResponse)(nil), "shorted.watcher.v1.SyncWatcherResponse")
}

func init() {
	proto.RegisterFile("shorted/watcher/v1/watcher_service.proto", fileDescriptor_4810ced3ab1372f1)
}

var fileDescriptor_4810ced3ab1372f1 = []byte{
	// 708 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x4d, 0x4f, 0xd4, 0x40,
	0x18, 0x76, 0xba, 0x22, 0xfa, 0xf2, 0x3d, 0x2c, 0xb0, 0x36, 0x64, 0xd9, 0x0c, 0x11, 0x56, 0x22,
	0xad, 0x0b, 0x17, 0x83, 0x5c, 0x58, 0x89, 0xc6, 0x8f, 0x98, 0x95, 0x55, 0x30, 0x86, 0x44, 0x4b,
	0x77, 0xb2, 0xdb, 0xa4, 0xb4, 0xb5, 0x53, 0x96, 0xe0, 0x47, 0xa2, 0x24, 0xfe, 0x01, 0xbd, 0x78,
	0xf6, 0xe8, 0xc9, 0x9f, 0x61, 0x3c, 0x99, 0x98, 0x78, 0x36, 0xe8, 0xaf, 0xf0, 0x64, 0x76, 0x3a,
	0xa5, 0xdb, 0xee, 0xe0, 0x12, 0x38, 0x75, 0xf2, 0xf6, 0x79, 0x9f, 0xe7, 0x79, 0x27, 0xf3, 0xcc,
	0x40, 0x91, 0x35, 0x5c, 0x3f, 0xa0, 0x35, 0x7d, 0xd7, 0x08, 0xcc, 0x06, 0xf5, 0xf5, 0x66, 0x29,
	0x5a, 0x3e, 0x65, 0xd4, 0x6f, 0x5a, 0x26, 0xd5, 0x3c, 0xdf, 0x0d, 0x5c, 0x8c, 0x05, 0x52, 0x13,
	0xbf, 0xb5, 0x66, 0x49, 0x9d, 0xac, 0xbb, 0x6e, 0xdd, 0xa6, 0xba, 0xe1, 0x59, 0xba, 0xe1, 0x38,
	0x6e, 0x60, 0x04, 0x96, 0xeb, 0xb0, 0xb0, 0x43, 0x9d, 0x68, 0x1a, 0xb6, 0x55, 0x33, 0x02, 0xaa,
	0x47, 0x0b, 0xf1, 0xe3, 0x0a, 0xff, 0x98, 0xf3, 0x75, 0xea, 0xcc, 0xb3, 0x5d, 0xa3, 0x5e, 0xa7,
	0xbe, 0xee, 0x7a, 0xbc, 0x55, 0x42, 0x53, 0x38, 0xda, 0x62, 0x88, 0x20, 0x63, 0x30, 0x7a, 0xcf,
	0x62, 0xc1, 0x46, 0x58, 0x64, 0x6b, 0xf4, 0xf9, 0x0e, 0x65, 0x01, 0x79, 0x08, 0xd9, 0x64, 0x99,
	0x79, 0xae, 0xc3, 0x28, 0x5e, 0x86, 0xde, 0xb0, 0x9f, 0xe5, 0x50, 0x21, 0x53, 0xec, 0x5b, 0x20,
	0x5a, 0xe7, 0x6c, 0x9a, 0x68, 0x5b, 0xa5, 0x81, 0x61, 0xd9, 0x6c, 0x2d, 0x6a, 0x21, 0xd3, 0x30,
	0x72, 0x8b, 0x46, 0xa4, 0x42, 0x0a, 0x0f, 0x82, 0x62, 0xd5, 0x72, 0xa8, 0x80, 0x8a, 0x17, 0xd6,
	0x14, 0xab, 0x46, 0xee, 0x03, 0x6e, 0x07, 0x09, 0xe1, 0x6b, 0xd0, 0xc3, 0x59, 0x38, 0xf0, 0x78,
	0xb2, 0x61, 0x03, 0xa9, 0x40, 0xf6, 0x86, 0x4f, 0x8d, 0x80, 0xa6, 0x74, 0x4f, 0xce, 0xf8, 0x00,
	0xc6, 0x52, 0x8c, 0xa7, 0x36, 0xf9, 0x0c, 0xb2, 0x8f, 0xbc, 0x5a, 0xa7, 0xc9, 0xd4, 0xe6, 0xc4,
	0x0a, 0xca, 0x09, 0x4c, 0xa7, 0x14, 0x4e, 0x6d, 0x7a, 0x06, 0xb2, 0xab, 0xd4, 0xa6, 0xdd, 0x4c,
	0xb7, 0xa4, 0x53, 0xb8, 0x53, 0x4b, 0x0f, 0xc3, 0x60, 0x75, 0xcf, 0x31, 0x57, 0x6c, 0x3b, 0x3a,
	0xb1, 0x37, 0x61, 0xe8, 0xb0, 0x22, 0xe8, 0x17, 0xe1, 0x2c, 0xdb, 0x73, 0x4c, 0x71, 0x52, 0xa7,
	0x64, 0xec, 0xad, 0x96, 0x88, 0x9a, 0x83, 0x89, 0x06, 0xb8, 0x55, 0x4c, 0x8d, 0x94, 0x8b, 0x47,
	0x2a, 0x9f, 0xff, 0x5b, 0xee, 0xf1, 0x33, 0x5f, 0x10, 0xe2, 0xc3, 0xdd, 0x81, 0xd1, 0x04, 0xbe,
	0x43, 0x1b, 0x1d, 0x5b, 0x7b, 0xe1, 0x6d, 0x2f, 0xf4, 0x73, 0xa2, 0x6a, 0x78, 0x7d, 0xe0, 0x17,
	0xd0, 0xdf, 0x1e, 0x43, 0x3c, 0x2b, 0xe3, 0x91, 0xe4, 0x57, 0x2d, 0x76, 0x07, 0x86, 0x46, 0xc9,
	0xc4, 0xfe, 0x8f, 0x3f, 0x1f, 0x94, 0x11, 0x3c, 0xc4, 0x6f, 0xa2, 0xf8, 0x7e, 0xc0, 0x7b, 0x00,
	0x71, 0x0e, 0xf1, 0x25, 0x19, 0x61, 0x47, 0x98, 0xd5, 0x99, 0x6e, 0x30, 0xa1, 0x3a, 0xc9, 0x55,
	0xc7, 0x71, 0x36, 0xa5, 0xaa, 0xbf, 0xb4, 0x6a, 0xaf, 0xf1, 0x1b, 0x04, 0x03, 0x89, 0x84, 0x61,
	0xe9, 0x3c, 0xb2, 0x58, 0xab, 0x97, 0x8f, 0x81, 0x14, 0x26, 0x54, 0x6e, 0x22, 0x4b, 0xd2, 0xa3,
	0x2f, 0xa1, 0x39, 0xbc, 0x8f, 0x60, 0x20, 0x71, 0x68, 0xe5, 0x16, 0x64, 0xe7, 0x5f, 0x6e, 0x41,
	0x9a, 0x80, 0x68, 0x1f, 0xe6, 0xe4, 0xfb, 0xf0, 0x0e, 0xc1, 0x40, 0x22, 0xb4, 0x72, 0x13, 0xb2,
	0x9b, 0x43, 0x6e, 0x42, 0x7a, 0x03, 0x90, 0x29, 0x6e, 0xe2, 0x22, 0x91, 0x9a, 0x68, 0x6d, 0x86,
	0x0d, 0xbd, 0x22, 0x5b, 0x98, 0x1c, 0x75, 0x92, 0xe3, 0x28, 0xaa, 0xd3, 0xff, 0xc5, 0x08, 0xd1,
	0x1c, 0x17, 0xc5, 0x64, 0x38, 0x12, 0x6d, 0x25, 0x40, 0x37, 0x6c, 0x1b, 0xbf, 0x82, 0xbe, 0xb6,
	0x44, 0xe1, 0x99, 0xa3, 0xd8, 0x52, 0x03, 0xcf, 0x76, 0xc5, 0x25, 0xf7, 0x9c, 0x8c, 0x24, 0x94,
	0xc5, 0xac, 0xe5, 0x9f, 0xe8, 0xfd, 0xca, 0x06, 0xee, 0x59, 0xc8, 0x94, 0xb4, 0xab, 0x73, 0x48,
	0xf1, 0xef, 0x42, 0x9f, 0x20, 0x28, 0xac, 0x54, 0x6e, 0xe3, 0xe5, 0x46, 0x10, 0x78, 0x6c, 0x49,
	0xd7, 0xeb, 0x56, 0xd0, 0xd8, 0xd9, 0xd2, 0x4c, 0x77, 0x5b, 0x17, 0xba, 0x86, 0xe7, 0x45, 0xcb,
	0xb8, 0x64, 0xb1, 0xb6, 0xb7, 0xf7, 0xeb, 0x41, 0x1e, 0x7d, 0x3f, 0xc8, 0xa3, 0x5f, 0x07, 0x79,
	0xf4, 0xf1, 0x77, 0xfe, 0x0c, 0x8c, 0x9b, 0xee, 0xb6, 0xc4, 0x76, 0xb9, 0x5f, 0x48, 0x56, 0x5a,
	0x6f, 0x74, 0x05, 0x3d, 0xc1, 0x31, 0xc7, 0x75, 0xb1, 0xfc, 0xa4, 0x64, 0xaa, 0x1b, 0x8f, 0x3f,
	0x2b, 0xb8, 0x2a, 0xda, 0x45, 0x8b, 0xb6, 0x5e, 0xfa, 0x76, 0x58, 0xdc, 0x14, 0xc5, 0xcd, 0xf5,
	0xd2, 0xd6, 0x39, 0xfe, 0xe0, 0x2f, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x31, 0x24, 0x7b, 0x3f,
	0xb7, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WatchServiceClient is the client API for WatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WatchServiceClient interface {
	// A unary RPC used to fetch a list of existing watches
	ListWatchers(ctx context.Context, in *ListWatchersRequest, opts ...grpc.CallOption) (*ListWatchersResponse, error)
	// A unary RPC used to fetch a specific watcherby watch ID
	GetWatcher(ctx context.Context, in *GetWatcherRequest, opts ...grpc.CallOption) (*GetWatcherResponse, error)
	// A unary RPC to create a new watch source.
	CreateWatcher(ctx context.Context, in *CreateWatcherRequest, opts ...grpc.CallOption) (*CreateWatcherResponse, error)
	// A unary RPC to delete a watch source.
	DeleteWatcher(ctx context.Context, in *DeleteWatcherRequest, opts ...grpc.CallOption) (*DeleteWatcherResponse, error)
	// A unary RPC to update an existing watch.
	UpdateWatcher(ctx context.Context, in *UpdateWatcherRequest, opts ...grpc.CallOption) (*UpdateWatcherResponse, error)
	// A unary RPC to update an existing watch.
	SyncAll(ctx context.Context, in *SyncAllRequest, opts ...grpc.CallOption) (*SyncAllResponse, error)
	// A unary RPC to update an existing watch.
	SyncWatcher(ctx context.Context, in *SyncWatcherRequest, opts ...grpc.CallOption) (*SyncWatcherResponse, error)
}

type watchServiceClient struct {
	cc *grpc.ClientConn
}

func NewWatchServiceClient(cc *grpc.ClientConn) WatchServiceClient {
	return &watchServiceClient{cc}
}

func (c *watchServiceClient) ListWatchers(ctx context.Context, in *ListWatchersRequest, opts ...grpc.CallOption) (*ListWatchersResponse, error) {
	out := new(ListWatchersResponse)
	err := c.cc.Invoke(ctx, "/shorted.watcher.v1.WatchService/ListWatchers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchServiceClient) GetWatcher(ctx context.Context, in *GetWatcherRequest, opts ...grpc.CallOption) (*GetWatcherResponse, error) {
	out := new(GetWatcherResponse)
	err := c.cc.Invoke(ctx, "/shorted.watcher.v1.WatchService/GetWatcher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchServiceClient) CreateWatcher(ctx context.Context, in *CreateWatcherRequest, opts ...grpc.CallOption) (*CreateWatcherResponse, error) {
	out := new(CreateWatcherResponse)
	err := c.cc.Invoke(ctx, "/shorted.watcher.v1.WatchService/CreateWatcher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchServiceClient) DeleteWatcher(ctx context.Context, in *DeleteWatcherRequest, opts ...grpc.CallOption) (*DeleteWatcherResponse, error) {
	out := new(DeleteWatcherResponse)
	err := c.cc.Invoke(ctx, "/shorted.watcher.v1.WatchService/DeleteWatcher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchServiceClient) UpdateWatcher(ctx context.Context, in *UpdateWatcherRequest, opts ...grpc.CallOption) (*UpdateWatcherResponse, error) {
	out := new(UpdateWatcherResponse)
	err := c.cc.Invoke(ctx, "/shorted.watcher.v1.WatchService/UpdateWatcher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchServiceClient) SyncAll(ctx context.Context, in *SyncAllRequest, opts ...grpc.CallOption) (*SyncAllResponse, error) {
	out := new(SyncAllResponse)
	err := c.cc.Invoke(ctx, "/shorted.watcher.v1.WatchService/SyncAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchServiceClient) SyncWatcher(ctx context.Context, in *SyncWatcherRequest, opts ...grpc.CallOption) (*SyncWatcherResponse, error) {
	out := new(SyncWatcherResponse)
	err := c.cc.Invoke(ctx, "/shorted.watcher.v1.WatchService/SyncWatcher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WatchServiceServer is the server API for WatchService service.
type WatchServiceServer interface {
	// A unary RPC used to fetch a list of existing watches
	ListWatchers(context.Context, *ListWatchersRequest) (*ListWatchersResponse, error)
	// A unary RPC used to fetch a specific watcherby watch ID
	GetWatcher(context.Context, *GetWatcherRequest) (*GetWatcherResponse, error)
	// A unary RPC to create a new watch source.
	CreateWatcher(context.Context, *CreateWatcherRequest) (*CreateWatcherResponse, error)
	// A unary RPC to delete a watch source.
	DeleteWatcher(context.Context, *DeleteWatcherRequest) (*DeleteWatcherResponse, error)
	// A unary RPC to update an existing watch.
	UpdateWatcher(context.Context, *UpdateWatcherRequest) (*UpdateWatcherResponse, error)
	// A unary RPC to update an existing watch.
	SyncAll(context.Context, *SyncAllRequest) (*SyncAllResponse, error)
	// A unary RPC to update an existing watch.
	SyncWatcher(context.Context, *SyncWatcherRequest) (*SyncWatcherResponse, error)
}

// UnimplementedWatchServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWatchServiceServer struct {
}

func (*UnimplementedWatchServiceServer) ListWatchers(ctx context.Context, req *ListWatchersRequest) (*ListWatchersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWatchers not implemented")
}
func (*UnimplementedWatchServiceServer) GetWatcher(ctx context.Context, req *GetWatcherRequest) (*GetWatcherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWatcher not implemented")
}
func (*UnimplementedWatchServiceServer) CreateWatcher(ctx context.Context, req *CreateWatcherRequest) (*CreateWatcherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWatcher not implemented")
}
func (*UnimplementedWatchServiceServer) DeleteWatcher(ctx context.Context, req *DeleteWatcherRequest) (*DeleteWatcherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWatcher not implemented")
}
func (*UnimplementedWatchServiceServer) UpdateWatcher(ctx context.Context, req *UpdateWatcherRequest) (*UpdateWatcherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWatcher not implemented")
}
func (*UnimplementedWatchServiceServer) SyncAll(ctx context.Context, req *SyncAllRequest) (*SyncAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncAll not implemented")
}
func (*UnimplementedWatchServiceServer) SyncWatcher(ctx context.Context, req *SyncWatcherRequest) (*SyncWatcherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncWatcher not implemented")
}

func RegisterWatchServiceServer(s *grpc.Server, srv WatchServiceServer) {
	s.RegisterService(&_WatchService_serviceDesc, srv)
}

func _WatchService_ListWatchers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWatchersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServiceServer).ListWatchers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorted.watcher.v1.WatchService/ListWatchers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServiceServer).ListWatchers(ctx, req.(*ListWatchersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchService_GetWatcher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWatcherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServiceServer).GetWatcher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorted.watcher.v1.WatchService/GetWatcher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServiceServer).GetWatcher(ctx, req.(*GetWatcherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchService_CreateWatcher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWatcherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServiceServer).CreateWatcher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorted.watcher.v1.WatchService/CreateWatcher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServiceServer).CreateWatcher(ctx, req.(*CreateWatcherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchService_DeleteWatcher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWatcherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServiceServer).DeleteWatcher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorted.watcher.v1.WatchService/DeleteWatcher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServiceServer).DeleteWatcher(ctx, req.(*DeleteWatcherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchService_UpdateWatcher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWatcherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServiceServer).UpdateWatcher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorted.watcher.v1.WatchService/UpdateWatcher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServiceServer).UpdateWatcher(ctx, req.(*UpdateWatcherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchService_SyncAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServiceServer).SyncAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorted.watcher.v1.WatchService/SyncAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServiceServer).SyncAll(ctx, req.(*SyncAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchService_SyncWatcher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncWatcherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServiceServer).SyncWatcher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorted.watcher.v1.WatchService/SyncWatcher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServiceServer).SyncWatcher(ctx, req.(*SyncWatcherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WatchService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shorted.watcher.v1.WatchService",
	HandlerType: (*WatchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListWatchers",
			Handler:    _WatchService_ListWatchers_Handler,
		},
		{
			MethodName: "GetWatcher",
			Handler:    _WatchService_GetWatcher_Handler,
		},
		{
			MethodName: "CreateWatcher",
			Handler:    _WatchService_CreateWatcher_Handler,
		},
		{
			MethodName: "DeleteWatcher",
			Handler:    _WatchService_DeleteWatcher_Handler,
		},
		{
			MethodName: "UpdateWatcher",
			Handler:    _WatchService_UpdateWatcher_Handler,
		},
		{
			MethodName: "SyncAll",
			Handler:    _WatchService_SyncAll_Handler,
		},
		{
			MethodName: "SyncWatcher",
			Handler:    _WatchService_SyncWatcher_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shorted/watcher/v1/watcher_service.proto",
}

func (m *ListWatchersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWatchersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWatchersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ListWatchersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListWatchersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListWatchersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Watches) > 0 {
		for iNdEx := len(m.Watches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Watches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWatcherService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetWatcherRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWatcherRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWatcherRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintWatcherService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetWatcherResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWatcherResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWatcherResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Watch != nil {
		{
			size, err := m.Watch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWatcherService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateWatcherRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateWatcherRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateWatcherRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Watch != nil {
		{
			size, err := m.Watch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWatcherService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateWatcherResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateWatcherResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateWatcherResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Watch != nil {
		{
			size, err := m.Watch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWatcherService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateWatcherRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateWatcherRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateWatcherRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Watch != nil {
		{
			size, err := m.Watch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWatcherService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintWatcherService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateWatcherResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateWatcherResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateWatcherResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Watch != nil {
		{
			size, err := m.Watch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWatcherService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteWatcherRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteWatcherRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteWatcherRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintWatcherService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteWatcherResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteWatcherResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteWatcherResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Watch != nil {
		{
			size, err := m.Watch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWatcherService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SyncAllRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncAllRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncAllRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *SyncAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sync) > 0 {
		for iNdEx := len(m.Sync) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sync[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWatcherService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SyncWatcherRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncWatcherRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncWatcherRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintWatcherService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SyncWatcherResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncWatcherResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncWatcherResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Sync != nil {
		{
			size, err := m.Sync.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWatcherService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintWatcherService(dAtA []byte, offset int, v uint64) int {
	offset -= sovWatcherService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ListWatchersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListWatchersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Watches) > 0 {
		for _, e := range m.Watches {
			l = e.Size()
			n += 1 + l + sovWatcherService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetWatcherRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovWatcherService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetWatcherResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Watch != nil {
		l = m.Watch.Size()
		n += 1 + l + sovWatcherService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateWatcherRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Watch != nil {
		l = m.Watch.Size()
		n += 1 + l + sovWatcherService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateWatcherResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Watch != nil {
		l = m.Watch.Size()
		n += 1 + l + sovWatcherService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateWatcherRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovWatcherService(uint64(l))
	}
	if m.Watch != nil {
		l = m.Watch.Size()
		n += 1 + l + sovWatcherService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateWatcherResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Watch != nil {
		l = m.Watch.Size()
		n += 1 + l + sovWatcherService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteWatcherRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovWatcherService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteWatcherResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Watch != nil {
		l = m.Watch.Size()
		n += 1 + l + sovWatcherService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SyncAllRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SyncAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sync) > 0 {
		for _, e := range m.Sync {
			l = e.Size()
			n += 1 + l + sovWatcherService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SyncWatcherRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovWatcherService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SyncWatcherResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sync != nil {
		l = m.Sync.Size()
		n += 1 + l + sovWatcherService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovWatcherService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWatcherService(x uint64) (n int) {
	return sovWatcherService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ListWatchersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWatcherService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWatchersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWatchersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWatcherService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWatcherService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListWatchersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWatcherService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListWatchersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListWatchersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Watches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWatcherService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWatcherService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWatcherService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Watches = append(m.Watches, &WatcherDetails{})
			if err := m.Watches[len(m.Watches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWatcherService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWatcherService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWatcherRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWatcherService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWatcherRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWatcherRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWatcherService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWatcherService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWatcherService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWatcherService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWatcherService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWatcherResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWatcherService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWatcherResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWatcherResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Watch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWatcherService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWatcherService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWatcherService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Watch == nil {
				m.Watch = &WatcherDetails{}
			}
			if err := m.Watch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWatcherService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWatcherService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateWatcherRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWatcherService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateWatcherRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateWatcherRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Watch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWatcherService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWatcherService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWatcherService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Watch == nil {
				m.Watch = &WatcherDetails{}
			}
			if err := m.Watch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWatcherService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWatcherService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateWatcherResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWatcherService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateWatcherResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateWatcherResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Watch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWatcherService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWatcherService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWatcherService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Watch == nil {
				m.Watch = &WatcherDetails{}
			}
			if err := m.Watch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWatcherService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWatcherService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateWatcherRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWatcherService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateWatcherRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateWatcherRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWatcherService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWatcherService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWatcherService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Watch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWatcherService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWatcherService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWatcherService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Watch == nil {
				m.Watch = &WatcherDetails{}
			}
			if err := m.Watch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWatcherService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWatcherService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateWatcherResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWatcherService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateWatcherResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateWatcherResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Watch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWatcherService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWatcherService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWatcherService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Watch == nil {
				m.Watch = &WatcherDetails{}
			}
			if err := m.Watch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWatcherService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWatcherService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteWatcherRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWatcherService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteWatcherRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteWatcherRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWatcherService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWatcherService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWatcherService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWatcherService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWatcherService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteWatcherResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWatcherService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteWatcherResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteWatcherResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Watch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWatcherService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWatcherService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWatcherService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Watch == nil {
				m.Watch = &WatcherDetails{}
			}
			if err := m.Watch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWatcherService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWatcherService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncAllRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWatcherService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncAllRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncAllRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWatcherService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWatcherService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWatcherService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sync", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWatcherService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWatcherService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWatcherService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sync = append(m.Sync, &SyncDetails{})
			if err := m.Sync[len(m.Sync)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWatcherService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWatcherService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncWatcherRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWatcherService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncWatcherRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncWatcherRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWatcherService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWatcherService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWatcherService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWatcherService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWatcherService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncWatcherResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWatcherService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncWatcherResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncWatcherResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sync", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWatcherService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWatcherService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWatcherService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sync == nil {
				m.Sync = &SyncDetails{}
			}
			if err := m.Sync.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWatcherService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWatcherService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWatcherService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWatcherService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWatcherService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWatcherService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWatcherService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWatcherService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWatcherService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWatcherService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWatcherService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWatcherService = fmt.Errorf("proto: unexpected end of group")
)
