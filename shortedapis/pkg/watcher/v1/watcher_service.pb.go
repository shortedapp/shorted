// // Copyright (c) 2020 Shorted Ltd Pty.
// //
// // Permission is hereby granted, free of charge, to any person obtaining a copy
// // of this software and associated documentation files (the "Software"), to deal
// // in the Software without restriction, including without limitation the rights
// // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// // copies of the Software, and to permit persons to whom the Software is
// // furnished to do so, subject to the following conditions:
// //
// // The above copyright notice and this permission notice shall be included in
// // all copies or substantial portions of the Software.
// //
// // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// // THE SOFTWARE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.17.3
// source: shorted/watcher/v1/watcher_service.proto

package watcher

import (
	context "context"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// ------------ LIST ------------
// ListWatchersRequest
type ListWatchersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListWatchersRequest) Reset() {
	*x = ListWatchersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shorted_watcher_v1_watcher_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWatchersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWatchersRequest) ProtoMessage() {}

func (x *ListWatchersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shorted_watcher_v1_watcher_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWatchersRequest.ProtoReflect.Descriptor instead.
func (*ListWatchersRequest) Descriptor() ([]byte, []int) {
	return file_shorted_watcher_v1_watcher_service_proto_rawDescGZIP(), []int{0}
}

type ListWatchersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Watches []*WatcherDetails `protobuf:"bytes,1,rep,name=watches,proto3" json:"watches,omitempty"`
}

func (x *ListWatchersResponse) Reset() {
	*x = ListWatchersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shorted_watcher_v1_watcher_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWatchersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWatchersResponse) ProtoMessage() {}

func (x *ListWatchersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_shorted_watcher_v1_watcher_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWatchersResponse.ProtoReflect.Descriptor instead.
func (*ListWatchersResponse) Descriptor() ([]byte, []int) {
	return file_shorted_watcher_v1_watcher_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListWatchersResponse) GetWatches() []*WatcherDetails {
	if x != nil {
		return x.Watches
	}
	return nil
}

// ------------ GET ------------
type GetWatcherRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetWatcherRequest) Reset() {
	*x = GetWatcherRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shorted_watcher_v1_watcher_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWatcherRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWatcherRequest) ProtoMessage() {}

func (x *GetWatcherRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shorted_watcher_v1_watcher_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWatcherRequest.ProtoReflect.Descriptor instead.
func (*GetWatcherRequest) Descriptor() ([]byte, []int) {
	return file_shorted_watcher_v1_watcher_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetWatcherRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetWatcherResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Watch *WatcherDetails `protobuf:"bytes,1,opt,name=watch,proto3" json:"watch,omitempty"`
}

func (x *GetWatcherResponse) Reset() {
	*x = GetWatcherResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shorted_watcher_v1_watcher_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWatcherResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWatcherResponse) ProtoMessage() {}

func (x *GetWatcherResponse) ProtoReflect() protoreflect.Message {
	mi := &file_shorted_watcher_v1_watcher_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWatcherResponse.ProtoReflect.Descriptor instead.
func (*GetWatcherResponse) Descriptor() ([]byte, []int) {
	return file_shorted_watcher_v1_watcher_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetWatcherResponse) GetWatch() *WatcherDetails {
	if x != nil {
		return x.Watch
	}
	return nil
}

type CreateWatcherRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Watch *WatcherDetails `protobuf:"bytes,1,opt,name=watch,proto3" json:"watch,omitempty"`
}

func (x *CreateWatcherRequest) Reset() {
	*x = CreateWatcherRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shorted_watcher_v1_watcher_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWatcherRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWatcherRequest) ProtoMessage() {}

func (x *CreateWatcherRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shorted_watcher_v1_watcher_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWatcherRequest.ProtoReflect.Descriptor instead.
func (*CreateWatcherRequest) Descriptor() ([]byte, []int) {
	return file_shorted_watcher_v1_watcher_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateWatcherRequest) GetWatch() *WatcherDetails {
	if x != nil {
		return x.Watch
	}
	return nil
}

type CreateWatcherResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Watch *WatcherDetails `protobuf:"bytes,1,opt,name=watch,proto3" json:"watch,omitempty"`
}

func (x *CreateWatcherResponse) Reset() {
	*x = CreateWatcherResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shorted_watcher_v1_watcher_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWatcherResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWatcherResponse) ProtoMessage() {}

func (x *CreateWatcherResponse) ProtoReflect() protoreflect.Message {
	mi := &file_shorted_watcher_v1_watcher_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWatcherResponse.ProtoReflect.Descriptor instead.
func (*CreateWatcherResponse) Descriptor() ([]byte, []int) {
	return file_shorted_watcher_v1_watcher_service_proto_rawDescGZIP(), []int{5}
}

func (x *CreateWatcherResponse) GetWatch() *WatcherDetails {
	if x != nil {
		return x.Watch
	}
	return nil
}

type UpdateWatcherRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Watch *WatcherDetails `protobuf:"bytes,2,opt,name=watch,proto3" json:"watch,omitempty"`
}

func (x *UpdateWatcherRequest) Reset() {
	*x = UpdateWatcherRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shorted_watcher_v1_watcher_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWatcherRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWatcherRequest) ProtoMessage() {}

func (x *UpdateWatcherRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shorted_watcher_v1_watcher_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWatcherRequest.ProtoReflect.Descriptor instead.
func (*UpdateWatcherRequest) Descriptor() ([]byte, []int) {
	return file_shorted_watcher_v1_watcher_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateWatcherRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateWatcherRequest) GetWatch() *WatcherDetails {
	if x != nil {
		return x.Watch
	}
	return nil
}

type UpdateWatcherResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Watch *WatcherDetails `protobuf:"bytes,1,opt,name=watch,proto3" json:"watch,omitempty"`
}

func (x *UpdateWatcherResponse) Reset() {
	*x = UpdateWatcherResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shorted_watcher_v1_watcher_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWatcherResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWatcherResponse) ProtoMessage() {}

func (x *UpdateWatcherResponse) ProtoReflect() protoreflect.Message {
	mi := &file_shorted_watcher_v1_watcher_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWatcherResponse.ProtoReflect.Descriptor instead.
func (*UpdateWatcherResponse) Descriptor() ([]byte, []int) {
	return file_shorted_watcher_v1_watcher_service_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateWatcherResponse) GetWatch() *WatcherDetails {
	if x != nil {
		return x.Watch
	}
	return nil
}

type DeleteWatcherRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteWatcherRequest) Reset() {
	*x = DeleteWatcherRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shorted_watcher_v1_watcher_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWatcherRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWatcherRequest) ProtoMessage() {}

func (x *DeleteWatcherRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shorted_watcher_v1_watcher_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWatcherRequest.ProtoReflect.Descriptor instead.
func (*DeleteWatcherRequest) Descriptor() ([]byte, []int) {
	return file_shorted_watcher_v1_watcher_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteWatcherRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteWatcherResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Watch *WatcherDetails `protobuf:"bytes,1,opt,name=watch,proto3" json:"watch,omitempty"`
}

func (x *DeleteWatcherResponse) Reset() {
	*x = DeleteWatcherResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shorted_watcher_v1_watcher_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWatcherResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWatcherResponse) ProtoMessage() {}

func (x *DeleteWatcherResponse) ProtoReflect() protoreflect.Message {
	mi := &file_shorted_watcher_v1_watcher_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWatcherResponse.ProtoReflect.Descriptor instead.
func (*DeleteWatcherResponse) Descriptor() ([]byte, []int) {
	return file_shorted_watcher_v1_watcher_service_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteWatcherResponse) GetWatch() *WatcherDetails {
	if x != nil {
		return x.Watch
	}
	return nil
}

// ------------ Sync ------------
// TODO(castlemilk): good use case for using streaming to track sync status to watch for updates etc via shortedctl
type SyncAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SyncAllRequest) Reset() {
	*x = SyncAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shorted_watcher_v1_watcher_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncAllRequest) ProtoMessage() {}

func (x *SyncAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shorted_watcher_v1_watcher_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncAllRequest.ProtoReflect.Descriptor instead.
func (*SyncAllRequest) Descriptor() ([]byte, []int) {
	return file_shorted_watcher_v1_watcher_service_proto_rawDescGZIP(), []int{10}
}

type SyncAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sync []*SyncDetails `protobuf:"bytes,1,rep,name=sync,proto3" json:"sync,omitempty"`
}

func (x *SyncAllResponse) Reset() {
	*x = SyncAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shorted_watcher_v1_watcher_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncAllResponse) ProtoMessage() {}

func (x *SyncAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_shorted_watcher_v1_watcher_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncAllResponse.ProtoReflect.Descriptor instead.
func (*SyncAllResponse) Descriptor() ([]byte, []int) {
	return file_shorted_watcher_v1_watcher_service_proto_rawDescGZIP(), []int{11}
}

func (x *SyncAllResponse) GetSync() []*SyncDetails {
	if x != nil {
		return x.Sync
	}
	return nil
}

type SyncWatcherRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SyncWatcherRequest) Reset() {
	*x = SyncWatcherRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shorted_watcher_v1_watcher_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncWatcherRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncWatcherRequest) ProtoMessage() {}

func (x *SyncWatcherRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shorted_watcher_v1_watcher_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncWatcherRequest.ProtoReflect.Descriptor instead.
func (*SyncWatcherRequest) Descriptor() ([]byte, []int) {
	return file_shorted_watcher_v1_watcher_service_proto_rawDescGZIP(), []int{12}
}

func (x *SyncWatcherRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SyncWatcherResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sync *SyncDetails `protobuf:"bytes,1,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *SyncWatcherResponse) Reset() {
	*x = SyncWatcherResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shorted_watcher_v1_watcher_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncWatcherResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncWatcherResponse) ProtoMessage() {}

func (x *SyncWatcherResponse) ProtoReflect() protoreflect.Message {
	mi := &file_shorted_watcher_v1_watcher_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncWatcherResponse.ProtoReflect.Descriptor instead.
func (*SyncWatcherResponse) Descriptor() ([]byte, []int) {
	return file_shorted_watcher_v1_watcher_service_proto_rawDescGZIP(), []int{13}
}

func (x *SyncWatcherResponse) GetSync() *SyncDetails {
	if x != nil {
		return x.Sync
	}
	return nil
}

var File_shorted_watcher_v1_watcher_service_proto protoreflect.FileDescriptor

var file_shorted_watcher_v1_watcher_service_proto_rawDesc = []byte{
	0x0a, 0x28, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2f, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x15, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x54, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2e,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x22, 0x23, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a,
	0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x22, 0x50, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x38, 0x0a, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x22, 0x51, 0x0a, 0x15, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2e, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x22, 0x60, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2e, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x22, 0x51,
	0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x05, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x22, 0x26, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x51, 0x0a, 0x15, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2e, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x22, 0x10, 0x0a, 0x0e,
	0x53, 0x79, 0x6e, 0x63, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x46,
	0x0a, 0x0f, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x22, 0x2e, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0,
	0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4a, 0x0a, 0x13, 0x53, 0x79, 0x6e, 0x63, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x04, 0x73, 0x79,
	0x6e, 0x63, 0x32, 0x81, 0x07, 0x0a, 0x0c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x7a, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x73, 0x12, 0x27, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2e, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12,
	0x79, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x25, 0x2e,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2e, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x80, 0x01, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x82, 0x01,
	0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12,
	0x28, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x2a, 0x14, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0x85, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2e, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x19, 0x22, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x6c, 0x0a, 0x07, 0x53, 0x79,
	0x6e, 0x63, 0x41, 0x6c, 0x6c, 0x12, 0x22, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2e,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x79, 0x6e, 0x63, 0x2f, 0x61, 0x6c, 0x6c, 0x12, 0x7c, 0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16,
	0x22, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x42, 0xc6, 0x01, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x42, 0x0c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x12, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0xa2, 0x02, 0x03, 0x53, 0x57, 0x58, 0xaa, 0x02, 0x12, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x56, 0x31,
	0xca, 0x02, 0x12, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5c, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x5c, 0x56, 0x31, 0x92, 0x41, 0x57, 0x12, 0x05, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a,
	0x01, 0x02, 0x72, 0x4b, 0x0a, 0x0b, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x20, 0x41, 0x50,
	0x49, 0x12, 0x3c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x61, 0x70, 0x70,
	0x2f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_shorted_watcher_v1_watcher_service_proto_rawDescOnce sync.Once
	file_shorted_watcher_v1_watcher_service_proto_rawDescData = file_shorted_watcher_v1_watcher_service_proto_rawDesc
)

func file_shorted_watcher_v1_watcher_service_proto_rawDescGZIP() []byte {
	file_shorted_watcher_v1_watcher_service_proto_rawDescOnce.Do(func() {
		file_shorted_watcher_v1_watcher_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_shorted_watcher_v1_watcher_service_proto_rawDescData)
	})
	return file_shorted_watcher_v1_watcher_service_proto_rawDescData
}

var file_shorted_watcher_v1_watcher_service_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_shorted_watcher_v1_watcher_service_proto_goTypes = []interface{}{
	(*ListWatchersRequest)(nil),   // 0: shorted.watcher.v1.ListWatchersRequest
	(*ListWatchersResponse)(nil),  // 1: shorted.watcher.v1.ListWatchersResponse
	(*GetWatcherRequest)(nil),     // 2: shorted.watcher.v1.GetWatcherRequest
	(*GetWatcherResponse)(nil),    // 3: shorted.watcher.v1.GetWatcherResponse
	(*CreateWatcherRequest)(nil),  // 4: shorted.watcher.v1.CreateWatcherRequest
	(*CreateWatcherResponse)(nil), // 5: shorted.watcher.v1.CreateWatcherResponse
	(*UpdateWatcherRequest)(nil),  // 6: shorted.watcher.v1.UpdateWatcherRequest
	(*UpdateWatcherResponse)(nil), // 7: shorted.watcher.v1.UpdateWatcherResponse
	(*DeleteWatcherRequest)(nil),  // 8: shorted.watcher.v1.DeleteWatcherRequest
	(*DeleteWatcherResponse)(nil), // 9: shorted.watcher.v1.DeleteWatcherResponse
	(*SyncAllRequest)(nil),        // 10: shorted.watcher.v1.SyncAllRequest
	(*SyncAllResponse)(nil),       // 11: shorted.watcher.v1.SyncAllResponse
	(*SyncWatcherRequest)(nil),    // 12: shorted.watcher.v1.SyncWatcherRequest
	(*SyncWatcherResponse)(nil),   // 13: shorted.watcher.v1.SyncWatcherResponse
	(*WatcherDetails)(nil),        // 14: shorted.watcher.v1.WatcherDetails
	(*SyncDetails)(nil),           // 15: shorted.watcher.v1.SyncDetails
}
var file_shorted_watcher_v1_watcher_service_proto_depIdxs = []int32{
	14, // 0: shorted.watcher.v1.ListWatchersResponse.watches:type_name -> shorted.watcher.v1.WatcherDetails
	14, // 1: shorted.watcher.v1.GetWatcherResponse.watch:type_name -> shorted.watcher.v1.WatcherDetails
	14, // 2: shorted.watcher.v1.CreateWatcherRequest.watch:type_name -> shorted.watcher.v1.WatcherDetails
	14, // 3: shorted.watcher.v1.CreateWatcherResponse.watch:type_name -> shorted.watcher.v1.WatcherDetails
	14, // 4: shorted.watcher.v1.UpdateWatcherRequest.watch:type_name -> shorted.watcher.v1.WatcherDetails
	14, // 5: shorted.watcher.v1.UpdateWatcherResponse.watch:type_name -> shorted.watcher.v1.WatcherDetails
	14, // 6: shorted.watcher.v1.DeleteWatcherResponse.watch:type_name -> shorted.watcher.v1.WatcherDetails
	15, // 7: shorted.watcher.v1.SyncAllResponse.sync:type_name -> shorted.watcher.v1.SyncDetails
	15, // 8: shorted.watcher.v1.SyncWatcherResponse.sync:type_name -> shorted.watcher.v1.SyncDetails
	0,  // 9: shorted.watcher.v1.WatchService.ListWatchers:input_type -> shorted.watcher.v1.ListWatchersRequest
	2,  // 10: shorted.watcher.v1.WatchService.GetWatcher:input_type -> shorted.watcher.v1.GetWatcherRequest
	4,  // 11: shorted.watcher.v1.WatchService.CreateWatcher:input_type -> shorted.watcher.v1.CreateWatcherRequest
	8,  // 12: shorted.watcher.v1.WatchService.DeleteWatcher:input_type -> shorted.watcher.v1.DeleteWatcherRequest
	6,  // 13: shorted.watcher.v1.WatchService.UpdateWatcher:input_type -> shorted.watcher.v1.UpdateWatcherRequest
	10, // 14: shorted.watcher.v1.WatchService.SyncAll:input_type -> shorted.watcher.v1.SyncAllRequest
	12, // 15: shorted.watcher.v1.WatchService.SyncWatcher:input_type -> shorted.watcher.v1.SyncWatcherRequest
	1,  // 16: shorted.watcher.v1.WatchService.ListWatchers:output_type -> shorted.watcher.v1.ListWatchersResponse
	3,  // 17: shorted.watcher.v1.WatchService.GetWatcher:output_type -> shorted.watcher.v1.GetWatcherResponse
	5,  // 18: shorted.watcher.v1.WatchService.CreateWatcher:output_type -> shorted.watcher.v1.CreateWatcherResponse
	9,  // 19: shorted.watcher.v1.WatchService.DeleteWatcher:output_type -> shorted.watcher.v1.DeleteWatcherResponse
	7,  // 20: shorted.watcher.v1.WatchService.UpdateWatcher:output_type -> shorted.watcher.v1.UpdateWatcherResponse
	11, // 21: shorted.watcher.v1.WatchService.SyncAll:output_type -> shorted.watcher.v1.SyncAllResponse
	13, // 22: shorted.watcher.v1.WatchService.SyncWatcher:output_type -> shorted.watcher.v1.SyncWatcherResponse
	16, // [16:23] is the sub-list for method output_type
	9,  // [9:16] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_shorted_watcher_v1_watcher_service_proto_init() }
func file_shorted_watcher_v1_watcher_service_proto_init() {
	if File_shorted_watcher_v1_watcher_service_proto != nil {
		return
	}
	file_shorted_watcher_v1_watcher_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_shorted_watcher_v1_watcher_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWatchersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shorted_watcher_v1_watcher_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWatchersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shorted_watcher_v1_watcher_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWatcherRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shorted_watcher_v1_watcher_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWatcherResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shorted_watcher_v1_watcher_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWatcherRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shorted_watcher_v1_watcher_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWatcherResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shorted_watcher_v1_watcher_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWatcherRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shorted_watcher_v1_watcher_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWatcherResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shorted_watcher_v1_watcher_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWatcherRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shorted_watcher_v1_watcher_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWatcherResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shorted_watcher_v1_watcher_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shorted_watcher_v1_watcher_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shorted_watcher_v1_watcher_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncWatcherRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shorted_watcher_v1_watcher_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncWatcherResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_shorted_watcher_v1_watcher_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_shorted_watcher_v1_watcher_service_proto_goTypes,
		DependencyIndexes: file_shorted_watcher_v1_watcher_service_proto_depIdxs,
		MessageInfos:      file_shorted_watcher_v1_watcher_service_proto_msgTypes,
	}.Build()
	File_shorted_watcher_v1_watcher_service_proto = out.File
	file_shorted_watcher_v1_watcher_service_proto_rawDesc = nil
	file_shorted_watcher_v1_watcher_service_proto_goTypes = nil
	file_shorted_watcher_v1_watcher_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WatchServiceClient is the client API for WatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WatchServiceClient interface {
	// A unary RPC used to fetch a list of existing watches
	ListWatchers(ctx context.Context, in *ListWatchersRequest, opts ...grpc.CallOption) (*ListWatchersResponse, error)
	// A unary RPC used to fetch a specific watcherby watch ID
	GetWatcher(ctx context.Context, in *GetWatcherRequest, opts ...grpc.CallOption) (*GetWatcherResponse, error)
	// A unary RPC to create a new watch source.
	CreateWatcher(ctx context.Context, in *CreateWatcherRequest, opts ...grpc.CallOption) (*CreateWatcherResponse, error)
	// A unary RPC to delete a watch source.
	DeleteWatcher(ctx context.Context, in *DeleteWatcherRequest, opts ...grpc.CallOption) (*DeleteWatcherResponse, error)
	// A unary RPC to update an existing watch.
	UpdateWatcher(ctx context.Context, in *UpdateWatcherRequest, opts ...grpc.CallOption) (*UpdateWatcherResponse, error)
	// A unary RPC to update an existing watch.
	SyncAll(ctx context.Context, in *SyncAllRequest, opts ...grpc.CallOption) (*SyncAllResponse, error)
	// A unary RPC to update an existing watch.
	SyncWatcher(ctx context.Context, in *SyncWatcherRequest, opts ...grpc.CallOption) (*SyncWatcherResponse, error)
}

type watchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWatchServiceClient(cc grpc.ClientConnInterface) WatchServiceClient {
	return &watchServiceClient{cc}
}

func (c *watchServiceClient) ListWatchers(ctx context.Context, in *ListWatchersRequest, opts ...grpc.CallOption) (*ListWatchersResponse, error) {
	out := new(ListWatchersResponse)
	err := c.cc.Invoke(ctx, "/shorted.watcher.v1.WatchService/ListWatchers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchServiceClient) GetWatcher(ctx context.Context, in *GetWatcherRequest, opts ...grpc.CallOption) (*GetWatcherResponse, error) {
	out := new(GetWatcherResponse)
	err := c.cc.Invoke(ctx, "/shorted.watcher.v1.WatchService/GetWatcher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchServiceClient) CreateWatcher(ctx context.Context, in *CreateWatcherRequest, opts ...grpc.CallOption) (*CreateWatcherResponse, error) {
	out := new(CreateWatcherResponse)
	err := c.cc.Invoke(ctx, "/shorted.watcher.v1.WatchService/CreateWatcher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchServiceClient) DeleteWatcher(ctx context.Context, in *DeleteWatcherRequest, opts ...grpc.CallOption) (*DeleteWatcherResponse, error) {
	out := new(DeleteWatcherResponse)
	err := c.cc.Invoke(ctx, "/shorted.watcher.v1.WatchService/DeleteWatcher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchServiceClient) UpdateWatcher(ctx context.Context, in *UpdateWatcherRequest, opts ...grpc.CallOption) (*UpdateWatcherResponse, error) {
	out := new(UpdateWatcherResponse)
	err := c.cc.Invoke(ctx, "/shorted.watcher.v1.WatchService/UpdateWatcher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchServiceClient) SyncAll(ctx context.Context, in *SyncAllRequest, opts ...grpc.CallOption) (*SyncAllResponse, error) {
	out := new(SyncAllResponse)
	err := c.cc.Invoke(ctx, "/shorted.watcher.v1.WatchService/SyncAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchServiceClient) SyncWatcher(ctx context.Context, in *SyncWatcherRequest, opts ...grpc.CallOption) (*SyncWatcherResponse, error) {
	out := new(SyncWatcherResponse)
	err := c.cc.Invoke(ctx, "/shorted.watcher.v1.WatchService/SyncWatcher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WatchServiceServer is the server API for WatchService service.
type WatchServiceServer interface {
	// A unary RPC used to fetch a list of existing watches
	ListWatchers(context.Context, *ListWatchersRequest) (*ListWatchersResponse, error)
	// A unary RPC used to fetch a specific watcherby watch ID
	GetWatcher(context.Context, *GetWatcherRequest) (*GetWatcherResponse, error)
	// A unary RPC to create a new watch source.
	CreateWatcher(context.Context, *CreateWatcherRequest) (*CreateWatcherResponse, error)
	// A unary RPC to delete a watch source.
	DeleteWatcher(context.Context, *DeleteWatcherRequest) (*DeleteWatcherResponse, error)
	// A unary RPC to update an existing watch.
	UpdateWatcher(context.Context, *UpdateWatcherRequest) (*UpdateWatcherResponse, error)
	// A unary RPC to update an existing watch.
	SyncAll(context.Context, *SyncAllRequest) (*SyncAllResponse, error)
	// A unary RPC to update an existing watch.
	SyncWatcher(context.Context, *SyncWatcherRequest) (*SyncWatcherResponse, error)
}

// UnimplementedWatchServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWatchServiceServer struct {
}

func (*UnimplementedWatchServiceServer) ListWatchers(context.Context, *ListWatchersRequest) (*ListWatchersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWatchers not implemented")
}
func (*UnimplementedWatchServiceServer) GetWatcher(context.Context, *GetWatcherRequest) (*GetWatcherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWatcher not implemented")
}
func (*UnimplementedWatchServiceServer) CreateWatcher(context.Context, *CreateWatcherRequest) (*CreateWatcherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWatcher not implemented")
}
func (*UnimplementedWatchServiceServer) DeleteWatcher(context.Context, *DeleteWatcherRequest) (*DeleteWatcherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWatcher not implemented")
}
func (*UnimplementedWatchServiceServer) UpdateWatcher(context.Context, *UpdateWatcherRequest) (*UpdateWatcherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWatcher not implemented")
}
func (*UnimplementedWatchServiceServer) SyncAll(context.Context, *SyncAllRequest) (*SyncAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncAll not implemented")
}
func (*UnimplementedWatchServiceServer) SyncWatcher(context.Context, *SyncWatcherRequest) (*SyncWatcherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncWatcher not implemented")
}

func RegisterWatchServiceServer(s *grpc.Server, srv WatchServiceServer) {
	s.RegisterService(&_WatchService_serviceDesc, srv)
}

func _WatchService_ListWatchers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWatchersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServiceServer).ListWatchers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorted.watcher.v1.WatchService/ListWatchers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServiceServer).ListWatchers(ctx, req.(*ListWatchersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchService_GetWatcher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWatcherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServiceServer).GetWatcher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorted.watcher.v1.WatchService/GetWatcher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServiceServer).GetWatcher(ctx, req.(*GetWatcherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchService_CreateWatcher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWatcherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServiceServer).CreateWatcher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorted.watcher.v1.WatchService/CreateWatcher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServiceServer).CreateWatcher(ctx, req.(*CreateWatcherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchService_DeleteWatcher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWatcherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServiceServer).DeleteWatcher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorted.watcher.v1.WatchService/DeleteWatcher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServiceServer).DeleteWatcher(ctx, req.(*DeleteWatcherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchService_UpdateWatcher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWatcherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServiceServer).UpdateWatcher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorted.watcher.v1.WatchService/UpdateWatcher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServiceServer).UpdateWatcher(ctx, req.(*UpdateWatcherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchService_SyncAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServiceServer).SyncAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorted.watcher.v1.WatchService/SyncAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServiceServer).SyncAll(ctx, req.(*SyncAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchService_SyncWatcher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncWatcherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServiceServer).SyncWatcher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shorted.watcher.v1.WatchService/SyncWatcher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServiceServer).SyncWatcher(ctx, req.(*SyncWatcherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WatchService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shorted.watcher.v1.WatchService",
	HandlerType: (*WatchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListWatchers",
			Handler:    _WatchService_ListWatchers_Handler,
		},
		{
			MethodName: "GetWatcher",
			Handler:    _WatchService_GetWatcher_Handler,
		},
		{
			MethodName: "CreateWatcher",
			Handler:    _WatchService_CreateWatcher_Handler,
		},
		{
			MethodName: "DeleteWatcher",
			Handler:    _WatchService_DeleteWatcher_Handler,
		},
		{
			MethodName: "UpdateWatcher",
			Handler:    _WatchService_UpdateWatcher_Handler,
		},
		{
			MethodName: "SyncAll",
			Handler:    _WatchService_SyncAll_Handler,
		},
		{
			MethodName: "SyncWatcher",
			Handler:    _WatchService_SyncWatcher_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shorted/watcher/v1/watcher_service.proto",
}
