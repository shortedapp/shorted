// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: shorted/watcher/v1/watcher_service.proto

package watcher

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// define the regex for a UUID once up-front
var _watcher_service_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ListWatchersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListWatchersRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListWatchersRequestValidationError is the validation error returned by
// ListWatchersRequest.Validate if the designated constraints aren't met.
type ListWatchersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWatchersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWatchersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWatchersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWatchersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWatchersRequestValidationError) ErrorName() string {
	return "ListWatchersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWatchersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWatchersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWatchersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWatchersRequestValidationError{}

// Validate checks the field values on ListWatchersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListWatchersResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetWatches() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWatchersResponseValidationError{
					field:  fmt.Sprintf("Watches[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListWatchersResponseValidationError is the validation error returned by
// ListWatchersResponse.Validate if the designated constraints aren't met.
type ListWatchersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWatchersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWatchersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWatchersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWatchersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWatchersResponseValidationError) ErrorName() string {
	return "ListWatchersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWatchersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWatchersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWatchersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWatchersResponseValidationError{}

// Validate checks the field values on GetWatcherRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetWatcherRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetWatcherRequestValidationError is the validation error returned by
// GetWatcherRequest.Validate if the designated constraints aren't met.
type GetWatcherRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWatcherRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWatcherRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWatcherRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWatcherRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWatcherRequestValidationError) ErrorName() string {
	return "GetWatcherRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWatcherRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWatcherRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWatcherRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWatcherRequestValidationError{}

// Validate checks the field values on GetWatcherResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetWatcherResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetWatch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWatcherResponseValidationError{
				field:  "Watch",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetWatcherResponseValidationError is the validation error returned by
// GetWatcherResponse.Validate if the designated constraints aren't met.
type GetWatcherResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWatcherResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWatcherResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWatcherResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWatcherResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWatcherResponseValidationError) ErrorName() string {
	return "GetWatcherResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWatcherResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWatcherResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWatcherResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWatcherResponseValidationError{}

// Validate checks the field values on CreateWatcherRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateWatcherRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetWatch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateWatcherRequestValidationError{
				field:  "Watch",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateWatcherRequestValidationError is the validation error returned by
// CreateWatcherRequest.Validate if the designated constraints aren't met.
type CreateWatcherRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWatcherRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWatcherRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWatcherRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWatcherRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWatcherRequestValidationError) ErrorName() string {
	return "CreateWatcherRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWatcherRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWatcherRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWatcherRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWatcherRequestValidationError{}

// Validate checks the field values on CreateWatcherResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateWatcherResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetWatch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateWatcherResponseValidationError{
				field:  "Watch",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateWatcherResponseValidationError is the validation error returned by
// CreateWatcherResponse.Validate if the designated constraints aren't met.
type CreateWatcherResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWatcherResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWatcherResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWatcherResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWatcherResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWatcherResponseValidationError) ErrorName() string {
	return "CreateWatcherResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWatcherResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWatcherResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWatcherResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWatcherResponseValidationError{}

// Validate checks the field values on UpdateWatcherRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateWatcherRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if v, ok := interface{}(m.GetWatch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateWatcherRequestValidationError{
				field:  "Watch",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateWatcherRequestValidationError is the validation error returned by
// UpdateWatcherRequest.Validate if the designated constraints aren't met.
type UpdateWatcherRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWatcherRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWatcherRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWatcherRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWatcherRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWatcherRequestValidationError) ErrorName() string {
	return "UpdateWatcherRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWatcherRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWatcherRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWatcherRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWatcherRequestValidationError{}

// Validate checks the field values on UpdateWatcherResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateWatcherResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetWatch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateWatcherResponseValidationError{
				field:  "Watch",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateWatcherResponseValidationError is the validation error returned by
// UpdateWatcherResponse.Validate if the designated constraints aren't met.
type UpdateWatcherResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWatcherResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWatcherResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWatcherResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWatcherResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWatcherResponseValidationError) ErrorName() string {
	return "UpdateWatcherResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWatcherResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWatcherResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWatcherResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWatcherResponseValidationError{}

// Validate checks the field values on DeleteWatcherRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteWatcherRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteWatcherRequestValidationError is the validation error returned by
// DeleteWatcherRequest.Validate if the designated constraints aren't met.
type DeleteWatcherRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWatcherRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWatcherRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWatcherRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWatcherRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWatcherRequestValidationError) ErrorName() string {
	return "DeleteWatcherRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWatcherRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWatcherRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWatcherRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWatcherRequestValidationError{}

// Validate checks the field values on DeleteWatcherResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteWatcherResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetWatch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteWatcherResponseValidationError{
				field:  "Watch",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteWatcherResponseValidationError is the validation error returned by
// DeleteWatcherResponse.Validate if the designated constraints aren't met.
type DeleteWatcherResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWatcherResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWatcherResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWatcherResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWatcherResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWatcherResponseValidationError) ErrorName() string {
	return "DeleteWatcherResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWatcherResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWatcherResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWatcherResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWatcherResponseValidationError{}

// Validate checks the field values on SyncAllRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SyncAllRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SyncAllRequestValidationError is the validation error returned by
// SyncAllRequest.Validate if the designated constraints aren't met.
type SyncAllRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncAllRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncAllRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncAllRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncAllRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncAllRequestValidationError) ErrorName() string { return "SyncAllRequestValidationError" }

// Error satisfies the builtin error interface
func (e SyncAllRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncAllRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncAllRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncAllRequestValidationError{}

// Validate checks the field values on SyncAllResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SyncAllResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetSync() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SyncAllResponseValidationError{
					field:  fmt.Sprintf("Sync[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SyncAllResponseValidationError is the validation error returned by
// SyncAllResponse.Validate if the designated constraints aren't met.
type SyncAllResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncAllResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncAllResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncAllResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncAllResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncAllResponseValidationError) ErrorName() string { return "SyncAllResponseValidationError" }

// Error satisfies the builtin error interface
func (e SyncAllResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncAllResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncAllResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncAllResponseValidationError{}

// Validate checks the field values on SyncWatcherRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SyncWatcherRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetId()); err != nil {
		return SyncWatcherRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	return nil
}

func (m *SyncWatcherRequest) _validateUuid(uuid string) error {
	if matched := _watcher_service_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SyncWatcherRequestValidationError is the validation error returned by
// SyncWatcherRequest.Validate if the designated constraints aren't met.
type SyncWatcherRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncWatcherRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncWatcherRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncWatcherRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncWatcherRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncWatcherRequestValidationError) ErrorName() string {
	return "SyncWatcherRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SyncWatcherRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncWatcherRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncWatcherRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncWatcherRequestValidationError{}

// Validate checks the field values on SyncWatcherResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SyncWatcherResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSync()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SyncWatcherResponseValidationError{
				field:  "Sync",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SyncWatcherResponseValidationError is the validation error returned by
// SyncWatcherResponse.Validate if the designated constraints aren't met.
type SyncWatcherResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncWatcherResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncWatcherResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncWatcherResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncWatcherResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncWatcherResponseValidationError) ErrorName() string {
	return "SyncWatcherResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SyncWatcherResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncWatcherResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncWatcherResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncWatcherResponseValidationError{}
