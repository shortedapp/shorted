// // Copyright (c) 2020 Shorted Ltd Pty.
// //
// // Permission is hereby granted, free of charge, to any person obtaining a copy
// // of this software and associated documentation files (the "Software"), to deal
// // in the Software without restriction, including without limitation the rights
// // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// // copies of the Software, and to permit persons to whom the Software is
// // furnished to do so, subject to the following conditions:
// //
// // The above copyright notice and this permission notice shall be included in
// // all copies or substantial portions of the Software.
// //
// // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// // THE SOFTWARE.

syntax = "proto3";

package shorted.service.watcher.v1;

option go_package = "github.com/shortedapp/shorted/sshortedapis/pkg/shorted/service/watcher/v1;watcher";

import "google/api/annotations.proto";
import "validate/validate.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "watcherapi/v1/watcher.proto";


option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    version: "1.0";
  };
  external_docs: {
    url: "https://github.com/shortedapp/shorted/shortedapis/watcher/v1";
    description: "Watcher API";
  }
  schemes: HTTPS;
};

service WatchService {
  // A unary RPC used to fetch a list of existing watches
  rpc ListWatchers(ListWatchersRequest) returns (ListWatchersResponse) {
    option (google.api.http) = {
      get: "/api/v1/watcher"
  };
  }
  // A unary RPC used to fetch a specific watcherby watch ID
  rpc GetWatcher(GetWatcherRequest) returns (GetWatcherResponse) {
    option (google.api.http) = {
      get: "/api/v1/watcher/{id}"
  };
  }
  // A unary RPC to create a new watch source. 
  rpc CreateWatcher(CreateWatcherRequest) returns (CreateWatcherResponse) {
    option (google.api.http) = {
      post: "/api/v1/watcher"
      body: "*"
  };
  }
  // A unary RPC to delete a watch source. 
  rpc DeleteWatcher(DeleteWatcherRequest) returns (DeleteWatcherResponse) {
    option (google.api.http) = {
      delete: "/api/v1/watcher/{id}"
  };
  }
  // A unary RPC to update an existing watch. 
  rpc UpdateWatcher(UpdateWatcherRequest) returns (UpdateWatcherResponse) {
    option (google.api.http) = {
      post: "/api/v1/watcher/{id}"
      body: "*"
  };
  }
  // A unary RPC to update an existing watch. 
  rpc SyncAll(SyncAllRequest) returns (SyncAllResponse) {
    option (google.api.http) = {
      post: "/api/v1/sync/all"
  };
  }
  // A unary RPC to update an existing watch. 
  rpc SyncWatcher(SyncWatcherRequest) returns (SyncWatcherResponse) {
    option (google.api.http) = {
      post: "/api/v1/sync/{id}"
      body: "*"
  };
  }
  
}


// ------------ LIST ------------
// ListWatchersRequest
message ListWatchersRequest {

}

message ListWatchersResponse {
  repeated WatcherDetails watches = 1;
}

// ------------ GET ------------
message GetWatcherRequest {
  string id = 1;
}

message GetWatcherResponse {
  WatcherDetails watch = 1;
}

//------------ CREATE ------------

message CreateWatcherRequest {
  WatcherDetails watch = 1;
}

message CreateWatcherResponse {
  WatcherDetails watch = 1;
}


//------------ UPDATE ------------

message UpdateWatcherRequest {
  string id = 1;
  WatcherDetails watch = 2;
}

message UpdateWatcherResponse {
  WatcherDetails watch = 1;
}

//------------ DELETE ------------

message DeleteWatcherRequest {
  string id = 1;
}

message DeleteWatcherResponse {
  WatcherDetails watch = 1;
}

// ------------ Sync ------------
// TODO(castlemilk): good use case for using streaming to track sync status to watch for updates etc via shortedctl
message SyncAllRequest {
}

message SyncAllResponse {
  repeated SyncDetails sync = 1;
}

message SyncWatcherRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message SyncWatcherResponse {
  SyncDetails sync = 1;
}